#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>

using namespace std;

class Solution {
public:
    int maximalPathQuality(vector<int>& values, vector<vector<int>>& edges, int maxTime) {

        int n = values.size();
        vector<vector<pair<int, int>>> graph(n);
        
        for (auto& edge : edges) {
            graph[edge[0]].emplace_back(edge[1], edge[2]);
            graph[edge[1]].emplace_back(edge[0], edge[2]);
        }

        int maxQuality = 0;
        vector<int> visited(n, 0); 
        function<void(int, int, int)> dfs = [&](int node, int timeSpent, int pathQuality) {
            if (timeSpent > maxTime) {
                return;
            }
            
            if (visited[node] == 0) {
                pathQuality += values[node];
            }
            
            if (node == 0) {
                maxQuality = max(maxQuality, pathQuality);
            }
            
            visited[node]++;
            
            for (auto& [neighbor, travelTime] : graph[node]) {
                dfs(neighbor, timeSpent + travelTime, pathQuality);
            }
            
            visited[node]--;
        };
        
        dfs(0, 0, 0);
        
        return maxQuality;
    }
};
